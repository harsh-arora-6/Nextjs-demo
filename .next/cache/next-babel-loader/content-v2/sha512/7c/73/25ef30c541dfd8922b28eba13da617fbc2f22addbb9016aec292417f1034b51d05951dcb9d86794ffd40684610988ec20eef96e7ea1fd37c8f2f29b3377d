{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/harsharora/Documents/nextjs-app/pages/[meetupId]/index.js\";\nimport { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Head, {\n      children: [/*#__PURE__*/_jsxDEV(\"title\", {\n        children: props.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"meta\", {\n        name: \"description\",\n        content: props.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeetupDetail, {\n      image: props.meetupData.image,\n      title: props.meetupData.title,\n      address: props.meetupData.address,\n      description: props.meetupData.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n} // this function is required in dynamic pages when using getStaticProps\n\n\nexport async function getStaticPaths() {\n  // we can dynamically generate paths by fetching the array of ids from database,\n  // fallback = false means that only the paths defined should exist\n  // fallback = true means for the defined paths pages should be pre generated while the other pages will be dynamically pre generated on the server for the incoming request\n  //   with the help of fallback we can pre generate some popular pages\n  const client = await MongoClient.connect(\"mongodb+srv://harsh_arora:iBk8oP6RjVv1O34V@cluster0.jfh4zpi.mongodb.net/?retryWrites=true&w=majority\");\n  const db = client.db(\"meetups\");\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data from API or take to some database\n  //   here context won't have request,response\n  const meetupId = context.params.meetupId;\n  const client = await MongoClient.connect(\"mongodb+srv://harsh_arora:iBk8oP6RjVv1O34V@cluster0.jfh4zpi.mongodb.net/?retryWrites=true&w=majority\");\n  const db = client.db(\"meetups\");\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId)\n  });\n  client.close();\n  return {\n    // here props is the props which we receive in above component.\n    // this is how we can move data fetching away from client side to the build process side\n    props: {\n      meetupData: {\n        id: meetupId,\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description\n      }\n    },\n    // time in seconds after which the page should be re pre-rendered with the new data.\n    // page is updated regularly after deployment(not only at build time)\n    revalidate: 1\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/Users/harsharora/Documents/nextjs-app/pages/[meetupId]/index.js"],"names":["MongoClient","ObjectId","MeetupDetail","Fragment","Head","MeetupDetails","props","title","description","meetupData","image","address","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","id","revalidate"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,QAAD;AAAA,4BACE,QAAC,IAAD;AAAA,8BACE;AAAA,kBAAQA,KAAK,CAACC;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAM,QAAA,IAAI,EAAC,aAAX;AAAyB,QAAA,OAAO,EAAED,KAAK,CAACE;AAAxC;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAKE,QAAC,YAAD;AACE,MAAA,KAAK,EAAEF,KAAK,CAACG,UAAN,CAAiBC,KAD1B;AAEE,MAAA,KAAK,EAAEJ,KAAK,CAACG,UAAN,CAAiBF,KAF1B;AAGE,MAAA,OAAO,EAAED,KAAK,CAACG,UAAN,CAAiBE,OAH5B;AAIE,MAAA,WAAW,EAAEL,KAAK,CAACG,UAAN,CAAiBD;AAJhC;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,C,CACD;;;AACA,OAAO,eAAeI,cAAf,GAAgC;AACrC;AACA;AACA;AACA;AACA,QAAMC,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,sGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,SAAV,CAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AAEAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAaC,MAAD,KAAa;AAC9BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD;AACD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC;AAEA,QAAMf,MAAM,GAAG,MAAMb,WAAW,CAACc,OAAZ,CACnB,sGADmB,CAArB;AAIA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,CAAU,SAAV,CAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACrDb,IAAAA,GAAG,EAAEnB,QAAQ,CAAC2B,QAAD;AADwC,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACL;AACA;AACAhB,IAAAA,KAAK,EAAE;AACLG,MAAAA,UAAU,EAAE;AACVyB,QAAAA,EAAE,EAAEN,QADM;AAEVlB,QAAAA,KAAK,EAAEsB,cAAc,CAACtB,KAFZ;AAGVH,QAAAA,KAAK,EAAEyB,cAAc,CAACzB,KAHZ;AAIVI,QAAAA,OAAO,EAAEqB,cAAc,CAACrB,OAJd;AAKVH,QAAAA,WAAW,EAAEwB,cAAc,CAACxB;AALlB;AADP,KAHF;AAYL;AACA;AACA2B,IAAAA,UAAU,EAAE;AAdP,GAAP;AAgBD;AACD,eAAe9B,aAAf","sourcesContent":["import { MongoClient, ObjectId } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { Fragment } from \"react\";\nimport Head from 'next/head';\n\nfunction MeetupDetails(props) {\n  return (\n    <Fragment>\n      <Head>\n        <title>{props.title}</title>\n        <meta name=\"description\" content={props.description} />\n      </Head>\n      <MeetupDetail\n        image={props.meetupData.image}\n        title={props.meetupData.title}\n        address={props.meetupData.address}\n        description={props.meetupData.description}\n      />\n    </Fragment>\n  );\n}\n// this function is required in dynamic pages when using getStaticProps\nexport async function getStaticPaths() {\n  // we can dynamically generate paths by fetching the array of ids from database,\n  // fallback = false means that only the paths defined should exist\n  // fallback = true means for the defined paths pages should be pre generated while the other pages will be dynamically pre generated on the server for the incoming request\n  //   with the help of fallback we can pre generate some popular pages\n  const client = await MongoClient.connect(\n    \"mongodb+srv://harsh_arora:iBk8oP6RjVv1O34V@cluster0.jfh4zpi.mongodb.net/?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db(\"meetups\");\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\n\n  client.close();\n\n  return {\n    fallback: false,\n    paths: meetups.map((meetup) => ({\n      params: { meetupId: meetup._id.toString() },\n    })),\n  };\n}\nexport async function getStaticProps(context) {\n  // fetch data from API or take to some database\n  //   here context won't have request,response\n  const meetupId = context.params.meetupId;\n\n  const client = await MongoClient.connect(\n    \"mongodb+srv://harsh_arora:iBk8oP6RjVv1O34V@cluster0.jfh4zpi.mongodb.net/?retryWrites=true&w=majority\"\n  );\n\n  const db = client.db(\"meetups\");\n\n  const meetupsCollection = db.collection(\"meetups\");\n\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId),\n  });\n\n  client.close();\n  return {\n    // here props is the props which we receive in above component.\n    // this is how we can move data fetching away from client side to the build process side\n    props: {\n      meetupData: {\n        id: meetupId,\n        image: selectedMeetup.image,\n        title: selectedMeetup.title,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n      },\n    },\n    // time in seconds after which the page should be re pre-rendered with the new data.\n    // page is updated regularly after deployment(not only at build time)\n    revalidate: 1,\n  };\n}\nexport default MeetupDetails;\n"]},"metadata":{},"sourceType":"module"}